命令面板：cmd

e: 回车

cd 文件名 回车

然后输入：npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev

e: 回车

cd 文件名 回车 输入gulp styles（sass翻译）  gulp images(图片压缩)




gulp安装步骤:
NO1----------------------------安装nodeJS------------------------

https://nodejs.org/en/

NO2---------------------sass安装-------------------------------------
http://www.w3cplus.com/sassguide/install.html
ruby安装

因为sass依赖于ruby环境，所以装sass之前先确认装了ruby。先导官网下载个ruby

在安装的时候，请勾选Add Ruby executables to your PATH这个选项，添加环境变量，不然以后使用编译软件的时候会提示找不到ruby环境

ruby install
sass安装

安装完ruby之后，在开始菜单中，找到刚才我们安装的ruby，打开Start Command Prompt with Ruby

Start Command Prompt with Ruby

然后直接在命令行中输入

gem install sass

按回车键确认，等待一段时间就会提示你sass安装成功。最近因为墙的比较厉害，如果你没有安装成功，那么请参考下面的淘宝的RubyGems镜像安装sass，如果成功则忽略。

如果要安装beta版本的，可以在命令行中输入

gem install sass --pre

你还可以从sass的Git repository来安装，git的命令行为

git clone git://github.com/nex3/sass.git
cd sass
rake install

升级sass版本的命令行为

gem update sass

查看sass版本的命令行为

sass -v

你也可以运行帮助命令行来查看你需要的命令

sass -h

淘宝RubyGems镜像安装 sass

由于国内网络原因（你懂的），导致 rubygems.org 存放在 Amazon S3 上面的资源文件间歇性连接失败。这时候我们可以通过gem sources命令来配置源，先移除默认的https://rubygems.org源，然后添加淘宝的源https://ruby.taobao.org/，然后查看下当前使用的源是哪个，如果是淘宝的，则表示可以输入sass安装命令gem install sass了，关于常用gem source命令可参看：常用的gem source

$ gem sources --remove https://rubygems.org/
$ gem sources -a https://ruby.taobao.org/
$ gem sources -l
*** CURRENT SOURCES ***

https://ruby.taobao.org
# 请确保只有 ruby.taobao.org
$ gem install sass



NO3------------------安装gulp--------------------

首先我们要全局安装一遍：

1

	

$ npm install gulp -g

接着我们要进去到项目的根目录再安装一遍（确保你根目录存在package.json文件）：

1

	

$ npm install gulp --save-dev


―save-dev这个属性会将条目保存到你package.json的devDependencies里面
安装Gulp插件

我们将要使用Gulp插件来完成我们以下任务：

    sass的编译（gulp-ruby-sass）
    自动添加css前缀（gulp-autoprefixer）
    压缩css（gulp-minify-css）
    js代码校验（gulp-jshint）
    合并js文件（gulp-concat）
    压缩js代码（gulp-uglify）
    压缩图片（gulp-imagemin）
    自动刷新页面（gulp-livereload）
    图片缓存，只有图片替换了才压缩（gulp-cache）
    更改提醒（gulp-notify）
    清除文件（del）

-------------命令--------------
npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev



―save-dev这个属性会将条目保存到你package.json的devDependencies里面


{
  "name": "test",   //项目名称（必须）
  "version": "1.0.0",   //项目版本（必须）
  "description": "This is for study gulp project !",   //项目描述（必须）
  "homepage": "",   //项目主页
  "repository": {    //项目资源库
    "type": "git",
    "url": "https://git.oschina.net/xxxx"
  },
  "author": {    //项目作者信息
    "name": "surging",
    "email": "surging2@qq.com"
  },
  "license": "ISC",    //项目许可协议
  "devDependencies": {    //项目依赖的插件
    "gulp": "^3.8.11",
    "gulp-less": "^3.0.0"
  }
}


接着我们要创建一个gulpfile.js在根目录下


var gulp = require('gulp'),

    sass = require('gulp-ruby-sass'),

    autoprefixer = require('gulp-autoprefixer'),

    minifyCss = require('gulp-minify-css'),

    jshint = require('gulp-jshint'),

    uglify = require('gulp-uglify'),

    imagemin = require('gulp-imagemin'),

    rename = require('gulp-rename'),

    concat = require('gulp-concat'),

    notify = require('gulp-notify'),

    cache = require('gulp-cache'),

    livereload = require('gulp-livereload'),

    /*spritesmith = require('gulp.spritesmith'),

	config      = require('../../config').sprites,*/

    del = require('del');

    

    

//sass编译 添加前缀 保存到目录下 压缩 添加.min在输出压缩文件到指定目录，最后提示任务完成

gulp.task('styles', function() {

  return sass('src/styles/common/*.scss', { style: 'expanded' })

    .pipe(autoprefixer('last 2 version', 'safari 5', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'))

    .pipe(concat('common.css'))

	.pipe(gulp.dest('dist/css'))

    .pipe(rename({suffix: '.min'}))

    .pipe(minifyCss())

	.pipe(gulp.dest('dist/css'))

    .pipe(notify({ message: '老大，您的sass旨意已完成' }));

});

//压缩图片

gulp.task('images', function() {

  return gulp.src('src/images/**/*')

    .pipe(imagemin({ optimizationLevel: 3, progressive: true, interlaced: true }))

    .pipe(gulp.dest('dist/images/'))

    .pipe(notify({ message: '老大，您的图片压缩旨意已完成' }));

});

//在任务执行前，最好先清除之前生成的文件

/*gulp.task('clean', function(cb) {

    del(['dist/css', 'dist/images'], cb)

    

});*/

//我们在命令行下输入 gulp执行的就是默认任务，现在我们为默认任务指定执行上面写好的2个任务

gulp.task('default', function() {

    gulp.start('styles',  'images');

});

//监听文件的是否修改以便执行相应的任务

gulp.task('watch', function() {

  // Watch .scss files

  gulp.watch('src/styles/**/*.scss', ['styles']);

 // Watch image files

  gulp.watch('src/images/**/*', ['images']);

  // Create LiveReload server

  livereload.listen();

  // Watch any files in dist/, reload on change

  gulp.watch(['dist/**']).on('change', livereload.changed);

});


